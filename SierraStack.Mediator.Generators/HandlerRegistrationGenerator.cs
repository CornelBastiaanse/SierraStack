using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace SierraStack.Mediator.Generators;

[Generator]
public class HandlerRegistrationGenerator : ISourceGenerator
{
    public void Initialize(GeneratorInitializationContext context)
    {
        // For now, no initialization logic
        context.RegisterForSyntaxNotifications(() => new HandlerSyntaxReceiver());
    }

    public void Execute(GeneratorExecutionContext context)
    {
        if (context.SyntaxReceiver is not HandlerSyntaxReceiver receiver)
            return;

        var compilation = context.Compilation;
        var requestHandlerSymbol = compilation.GetTypeByMetadataName("SierraStack.Mediator.Abstractions.IRequestHandler`2");
        var notificationHandlerSymbol = compilation.GetTypeByMetadataName("SierraStack.Mediator.Abstractions.INotificationHandler`1");

        var sb = new StringBuilder();
        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine("using Microsoft.Extensions.DependencyInjection;");
        sb.AppendLine("namespace SierraStack.Mediator.Generated;");
        sb.AppendLine("public static class MediatorGeneratedExtensions");
        sb.AppendLine("{");
        sb.AppendLine("    public static IServiceCollection AddGeneratedHandlers(this IServiceCollection services)");
        sb.AppendLine("    {");

        foreach (var candidate in receiver.Candidates)
        {
            var model = compilation.GetSemanticModel(candidate.SyntaxTree);
            var symbol = model.GetDeclaredSymbol(candidate) as INamedTypeSymbol;
            if (symbol == null) continue;

            var implementsRequestHandler = symbol.AllInterfaces.Any(i =>
                i.OriginalDefinition.Equals(requestHandlerSymbol, SymbolEqualityComparer.Default));

            var implementsNotificationHandler = symbol.AllInterfaces.Any(i =>
                i.OriginalDefinition.Equals(notificationHandlerSymbol, SymbolEqualityComparer.Default));

            if (implementsRequestHandler || implementsNotificationHandler)
            {
                var fullName = symbol.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
                sb.AppendLine($"        services.AddTransient(typeof({fullName}));");
            }
        }

        sb.AppendLine("        return services;");
        sb.AppendLine("    }");
        sb.AppendLine("}");

        context.AddSource("Mediator.Generated.g.cs", SourceText.From(sb.ToString(), Encoding.UTF8));
    }
}

internal class HandlerSyntaxReceiver : ISyntaxReceiver
{
    public List<ClassDeclarationSyntax> Candidates { get; } = new();

    public void OnVisitSyntaxNode(SyntaxNode syntaxNode)
    {
        if (syntaxNode is ClassDeclarationSyntax { BaseList: not null } cds)
        {
            Candidates.Add(cds);
        }
    }
}